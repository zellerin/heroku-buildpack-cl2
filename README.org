* Heroku Buildpack for Common Lisp

My rework of rework by Avodonosov of the Common Lisp buildpack for Heroku [by Mike Travers](https://github.com/mtravers/heroku-buildpack-cl).

Some differences from the two (actually, the combination of buildpack and app s
- Accepts SBCL_VERSION variable during build time to set SBCL version
- Simplified for my workflow
** What it does

The compile shell script basically:
- Get SBCL version from env directory (on Heroku) or environment (locally) ir default
- Download sbcl
- run sbcl on compile.lisp

The compile.lisp then:
- defines =(require-quicklisp)= to load quicklisp; application can
  require particular release of it
- loads heroku-compile from application
- saves image in "base.core".

** How should image look like
- have heroku-compile.lisp. It can look like
  #+begin_src emacs-lisp
    ;; SSL is not needed on Heroku, may be desirable locally
    (require 'sb-posix)
    (unless (sb-posix:getenv "SSL")
      (push :hunchentoot-no-ssl *features*))

    ;; Load all package definitions
    (require-quicklisp)
    (mapcar 'load (directory "**/*.asd"))

    ;; Compile application package and dependencies.
    (ql:quickload 'app)
#+end_src

- Have Procfile that loads base.core and starts application
: web: ./sbcl --noinform --core ./base.core --no-userinit --no-sysinit --load init.lisp

** How to test/use it locally
On local machine, I rebuild the image with
#+begin_src emacs-lisp
  (defun heroku-rebuild ()
    (interactive)
    (setenv "SBCL_VERSION" "2.0.0")
    (setenv "SSL" "T")
    (switch-to-buffer
     (make-comint "heroku-build"
		  (concat default-directory "heroku-buildpack-cl2/bin/compile")
		  nil
		  (expand-file-name default-directory)
		  "/var/cache/heroku" "env/")))
#+end_src

and then run the image with
#+begin_src emacs-lisp
    (defun heroku-run (&optional ask-port port)
      (interactive "p")
      (setenv "PORT"
	      (if (= ask-port 1) "5000" (read-string "Port: " "5000")))
      (setenv "TEST_INSTANCE" "1")
      (switch-to-buffer
       (make-comint "heroku" "./sbcl" nil
		    "--noinform" "--core" "./base.core"
		    "--no-sysinit" "--no-userinit"
		    "--load" "init.lisp"))
      ;; FIXME: use callback instead of fixed wait
      (sleep-for 0 100)
      (sly-connect "localhost" 5500))
#+end_src

** Usage
To feel comfortable, read about Heroku [Procfile](https://devcenter.heroku.com/articles/procfile)
and [Buildpack](https://devcenter.heroku.com/articles/buildpack-api). You will then understand,
that Heroku allows you to use any unix command to start your application. And buildpack
provides a separate `compile` step, where you can prepare things for that command: fetch
the lisp implementation binary, download libraries with quicklisp and build core file.
using full power of unix.

** Notes
- Heroku does not have a persistent file system. Applications should use a database or S3 for storage; [ZS3](http://www.xach.com/lisp/zs3) is a useful CL library for doing that.
- You can login into the server where your application is deployed and inspect it with `heroku run bash` command. See [one off dynos] (https://devcenter.heroku.com/articles/one-off-dynos).

** Todos
- `require-quicklisp` function should accept desirable quicklisp dist version and quicklisp
  client version, because when deploying application to server we want predictable environement.

** Credits
- Anton Vodonosov (http://productive-technologies.com/)
- [Mike Travers](hyperphor.com) for his great example
- Heroku and their new [Buildpack-capable stack](http://devcenter.heroku.com/articles/buildpacks)
- [QuickLisp](http://www.quicklisp.org/) library manager
- All other countless lispers and developers of all generations who made this possible.
